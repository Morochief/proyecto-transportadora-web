# =============================================================================
# Docker Compose - PRODUCCIÓN
# =============================================================================
# Este archivo está optimizado para entornos de producción
# Uso: docker-compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # ===========================================================================
  # Base de Datos PostgreSQL
  # ===========================================================================
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-logistica}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===========================================================================
  # Backend API (Flask)
  # ===========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: transportadora-backend:prod
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 --access-logfile - --error-logfile - wsgi:app
    working_dir: /app
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      FLASK_ENV: production
      FLASK_APP: wsgi.py
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS}
      FRONTEND_URL: ${FRONTEND_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      TIMEZONE: ${TIMEZONE:-America/Asuncion}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL}
      DEFAULT_ADMIN_USERNAME: ${DEFAULT_ADMIN_USERNAME}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      STRUCTURED_LOGGING: "1"
      ACCESS_TOKEN_EXPIRES_MINUTES: ${ACCESS_TOKEN_EXPIRES_MINUTES:-15}
      REFRESH_TOKEN_EXPIRES_DAYS: ${REFRESH_TOKEN_EXPIRES_DAYS:-7}
      PYTHONUNBUFFERED: "1"
    networks:
      - app-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ===========================================================================
  # Frontend (React + Nginx)
  # ===========================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_ENV: production
    image: transportadora-frontend:prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ===========================================================================
  # Go CRT API
  # ===========================================================================
  go-crt-api:
    build:
      context: ./go-crt-api
      dockerfile: Dockerfile
    image: transportadora-go-crt:prod
    restart: unless-stopped
    environment:
      DATABASE_URL: ${GO_DATABASE_URL}
    ports:
      - "${GO_CRT_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===========================================================================
  # PDF Service
  # ===========================================================================
  pdf-service:
    build:
      context: ./go-crt-api
      dockerfile: Dockerfile.pdf
    image: transportadora-pdf:prod
    restart: unless-stopped
    ports:
      - "${PDF_SERVICE_PORT:-3002}:3002"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===========================================================================
  # Nginx Reverse Proxy (Opcional - para SSL/TLS)
  # ===========================================================================
  # nginx-proxy:
  #   image: nginx:alpine
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata_prod:
  backend_logs:
